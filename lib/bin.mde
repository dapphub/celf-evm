bin: type.

e: bin.

i: bin -> bin.
o: bin -> bin.

nat: type.
ee: nat.
s: nat -> nat.

eq: bin -> bin -> type.
eq/z: eq X X.

neq: bin -> bin -> type.

neq/z1: neq e (o Y).
neq/z2: neq e (i X).
neq/z3: neq (o X) e.
neq/z4: neq (i X) e.
neq/z5: neq (o X) (i Y).
neq/z6: neq (i X) (o Y).
neq/s1: neq (o X) (o Y)
  <- neq X Y.
neq/s2: neq (i X) (i Y)
  <- neq X Y.

inc: bin -> bin -> type.
inc/z1: inc (o X) (i X).
inc/z2: inc e (i e).
inc/s: inc (i X) (o Y)
  <- inc X Y.

plus: bin -> bin -> bin -> type.

plus/z1: plus e e e.
plus/z2: plus e (o N) (o N).
plus/z3: plus e (i N) (i N).

plus/z4: plus (o M) (e) (o M).
plus/s1: plus (o M) (o N) (o R)
  <- plus M N R.
plus/s2: plus (o M) (i N) (i R)
  <- plus M N R.

plus/z5: plus (i M) e (i M).
plus/s3: plus (i M) (o N) (i R)
  <- plus M N R.

plus/s4: plus (i M) (i N) (o R)
  <- plus M N Q
  <- inc Q R.

mul: bin -> bin -> bin -> type.

mul/z1: mul e Y e.

mul/s1: mul (o X) Y Z
  <- mul X (o Y) Z.

mul/s2: mul (i X) Y Z'
  <- mul X (o Y) Z
  <- plus Y Z Z'.


%   X      Y      ass.   res.
gt: bin -> bin -> bin -> bin -> type.


gt/s_ii: gt (i X) (i Y) A R
  <- gt X Y A R.

gt/s_io: gt (i X) (o Y) A R
  <- gt X Y (i e) R.

gt/s_ie: gt (i X) e A (i e).

gt/s_oi: gt (o X) (i Y) A R
  <- gt X Y (o e) R.

gt/s_oo: gt (o X) (o Y) A R
  <- gt X Y A R.

gt/s_oe: gt (o X) e A R
  <- gt X e A R.

gt/s_ei: gt e (i Y) A (o e).

gt/s_eo: gt e (o Y) A R
  <- gt e Y A R.

gt/s_ee: gt e e A A.


exp: bin -> bin -> bin -> type.

exp/z: exp X e (i e).

exp/so: exp X (o Y) Z
  <- mul X X X'
  <- exp X' Y Z.

exp/si: exp X (i Y) Z'
  <- mul X X X'
  <- exp X' Y Z
  <- mul Z X Z'.

and: bin -> bin -> bin -> type.
and/zl: and e Y e.
and/zr: and X e e.
and/sii: and (i X) (i Y) (i Z)
  <- and X Y Z.

and/soi: and (o X) (i Y) (o Z)
  <- and X Y Z.
and/sio: and (i X) (o Y) (o Z)
  <- and X Y Z.
and/soo: and (o X) (o Y) (o Z)
  <- and X Y Z.


or: bin -> bin -> bin -> type.
or/zl: or e Y Y.
or/zr: or X e X.
or/sii: or (i X) (i Y) (i Z)
  <- or X Y Z.

or/soi: or (o X) (i Y) (i Z)
  <- or X Y Z.
or/sio: or (i X) (o Y) (i Z)
  <- or X Y Z.
or/soo: or (o X) (o Y) (o Z)
  <- or X Y Z.

not: bin -> bin -> type.
not/z: not e e.
not/si: not (i X) (o Y)
  <- not X Y.

not/so: not (o X) (i Y)
  <- not X Y.

% to256Helper: bin -> bin -> bin -> type.
%
%to256Helper/z: to256Helper e N
%
to256: bin -> bin -> type.

length: bin -> nat -> type.
length/z: length e ee.
length/si: length (i X) (s Y)
  <- length X Y.

length/so: length (o X) (s Y)
  <- length X Y.

%trim: bin -> nat -> bin -> type.
%trim/z: trim X ee X.
%trim/si: trim (i X) (s L) Y
%  <- trim X L Y.
%trim/so: trim (o X) (s L) Y
%  <- trim X L Y.

%concat: bin -> bin -> bin -> type.
%concat/z: concat e Y Y.
%concat/si: concat (i X) Y (i Z)
%  <- concat X Y Z.
%concat/so: concat (o X) Y (o Z)
%  <- concat X Y Z.

% TODO - see if i can abstract this number away.
%to256/z: to256 X Y
%  <- length X L
%  <- trim (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o e)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) L Z
%  <- concat Z X Y.


%reverse: bin -> bin -> type.
%reverse/z: reverse e e.
%reverse/s1: reverse (i X)

to256/z: to256 X Y
  <- or X (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o (o e)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) Y.


reverse: bin -> bin -> type.
reverse_h: bin -> bin -> bin -> type.

reverse/z: reverse X Y
  <- reverse_h X e Y.


reverse_h/z: reverse_h e Y Y.
reverse_h/si: reverse_h (i X) Y Z
  <- reverse_h X (i Y) Z.
reverse_h/so: reverse_h (o X) Y Z
  <- reverse_h X (o Y) Z.

trim: bin -> bin -> type.

%       curr   trim   orig   res
trim_h: bin -> bin -> bin -> bin -> type.

trim_h/z: trim_h e X Y Z
  <- reverse X Z.

trim_h/si: trim_h (i N) X Y Z
  <- trim_h N (i Y) (i Y) Z.

trim_h/so: trim_h (o N) X Y Z
  <- trim_h N X (o Y) Z.

trim/z: trim X Y
  <- trim_h X e e Y.



