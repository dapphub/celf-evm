% EVM
%
% 00   STOP
% 01   ADD           *
% 02   MUL           *
% 03   SUB           *
% 0a   EXP           *

% 10   LT            *
% 11   GT            *
% 14   EQ
% 15   ISZERO        ?
% 16   AND           *
% 17   OR            *
% 19   NOT           *

% 20   SHA3          TODO

% 30   ADDRESS
% 31   BALANCE
% 33   CALLER
% 34   CALLVALUE     *
% 35   CALLDATALOAD  *
% 36   CALLDATASIZE  *
% 37   CALLDATACOPY  *

% 42   TIMESTAMP     *
% 45   GASLIMIT      *

% 54   SLOAD
% 55   SSTORE        *
% 56   JUMP          *
% 57   JUMPI
% 5a   GAS
% 5b   JUMPDEST

% 60   PUSH1
% 73   PUSH20        *

% 80   DUP1
% 81   DUP2          *
% 82   DUP3          *

% 90   SWAP1         *

% a4   LOG4          *

% f1   CALL          ?
% fe   INVALID       *
% fd   REVERT        *

invalid: type.
revert: type.
log0: type.
log1: bin -> type.
log2: bin -> bin -> type.
log3: bin -> bin -> bin -> type.
log4: bin -> bin -> bin -> bin -> type.
stop: type.
pc: bin -> type.
gas: bin -> type.
sh: nat -> type.
code: bin -> bin -> type.
stack: nat -> bin -> type.
storage: bin -> bin -> type.
sender: bin -> type.
address: bin -> type.
balance: bin -> bin -> type.
callvalue: bin -> type.
calldata: bin -> bin -> bin -> type.
calldatasize: bin -> type.
debug: bin -> type.
memory: bin -> bin -> bin -> type.
mh: bin -> type.
timestamp: bin -> type.
gaslimit: bin -> type.
concat: bin -> bin -> bin.
sha3: bin -> bin.
call: bin -> bin -> bin -> bin -> bin -> bin -> bin -> type.




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  00

evm/stop:
  pc PC *
  code PC N_00 *
  !inc PC PC'
  -o {
    code PC N_00 *
    stop
  }.

evm/add:
  pc PC *
  code PC N_01 *
  !inc PC PC' *
  sh (s (s SH)) *
  stack (s SH) A *
  stack SH  B *
  !plus A B C
  -o {
    code PC N_01 *
    pc PC' *
    sh (s SH) *
    stack SH C
  }.

evm/mul:
  pc PC *
  code PC N_02 *
  !inc PC PC' *
  sh (s (s SH)) *
  stack (s SH) A *
  stack SH  B *
  trim A A' *
  trim B B' *
  !mul A B C *
  to256 C C'
  -o {
    code PC N_02 *
    pc PC' *
    sh (s SH) *
    stack SH C'
  }.

evm/sub:
  pc PC *
  code PC N_03 *
  !inc PC PC' *
  sh (s (s SH)) *
  stack (s SH) A *
  stack SH  B *
  !plus C B A
  -o {
    code PC N_03 *
    pc PC' *
    sh (s SH) *
    stack SH C
  }.

evm/exp:
  pc PC *
  code PC N_0a *
  !inc PC PC' *
  sh (s (s SH)) *
  stack (s SH) Base *
  stack SH  Exponent *
  !trim Base Base' *
  !trim Exponent Exponent' *
  !exp Base' Exponent' Result *
  !to256 Result Result'
  -o {
    debug Base' *
    debug Exponent' *
    code PC N_0a *
    pc PC' *
    sh (s SH) *
    stack SH Result'
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  10

%evm/eq_eqeq:
%  code PC N_14 *
%  pc PC *
%  !inc PC PC' *
%  gas GAS *
%  !plus (o(i e)) GAS GAS' * %10 = 2 *
%  sh SH'' *
%  !inc SH' SH'' *
%  !inc SH SH' *
%  stack SH' X *
%  stack SH X
%  -o {
%    pc PC' *
%    gas GAS' *
%    code PC N_14 *
%    sh SH' *
%    stack SH N_01
%  }.

evm/eq:
  pc PC *
  code PC N_14 *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh (s (s SH)) *
  stack (s SH) X *
  stack SH Y
  -o {
    pc PC' *
    gas GAS' *
    code PC N_14 *
    sh (s SH) *
    ((!neq X Y -o {
      stack SH N_00
    }) &
    (!eq X Y -o {
      stack SH N_01
    }))
  }.

evm/iszero_eq:
  pc PC *
  code PC N_15 *
  !inc PC PC' *
  gas GAS *
  !inc GAS GAS' *
  sh (s SH) *
  stack SH N_00
  -o {
    code PC N_15 *
    pc PC' *
    gas GAS' *
    sh (s SH) *
    stack SH N_01
  }.

evm/iszero_neq:
  pc PC *
  code PC N_15 *
  !inc PC PC' *
  gas GAS *
  !inc GAS GAS' *
  sh (s SH) *
  stack SH V *
  !neq V N_00
  -o {
    code PC N_15 *
    pc PC' *
    gas GAS' *
    sh (s SH) *
    stack SH N_00
  }.

evm/lt:
  pc PC *
  code PC N_10 *
  !inc PC PC' *
  sh (s (s SH)) *
  stack (s SH) X *
  stack SH Y *
  !gt Y X N_00 Z *
  to256 Z Z'
  -o {
    code PC N_10 *
    pc PC' *
    sh (s SH) *
    stack SH Z'
  }.

evm/gt:
  pc PC *
  code PC N_11 *
  !inc PC PC' *
  sh (s (s SH)) *
  stack (s SH) X *
  stack SH Y *
  !gt X Y N_00 Z *
  to256 Z Z'
  -o {
    code PC N_11 *
    pc PC' *
    sh (s SH) *
    stack SH Z'
  }.

evm/and:
  pc PC *
  code PC N_16 *
  !inc PC PC' *
  sh (s (s SH)) *
  stack (s SH) X *
  stack SH  Y *
  !and X Y Z
  -o {
    code PC N_16 *
    pc PC' *
    sh (s SH) *
    stack SH Z
  }.

evm/or:
  pc PC *
  code PC N_17 *
  !inc PC PC' *
  sh (s (s SH)) *
  stack (s SH) X *
  stack SH  Y *
  !or X Y Z
  -o {
    code PC N_17 *
    pc PC' *
    sh (s SH) *
    stack SH Z
  }.

evm/not:
  pc PC *
  code PC N_19 *
  !inc PC PC' *
  sh (s SH) *
  stack SH X *
  !not X Y
  -o {
    code PC N_19 *
    pc PC' *
    sh (s SH) *
    stack SH Y
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  20

% TODO - dirty -.-, I don't want to implemet sha3 in here
% TODO - summ over memory

concatMemory: bin -> bin -> bin -> type.
unblockConcatMemory: bin -> type.
concatMemory/z: concatMemory X X Z
  -o {
    unblockConcatMemory Z
  }.
concatMemory/s:
  concatMemory Pos To Z *
  !neq Pos To           *
  memory Pos Size V     *
  !plus Pos Size Pos'
  -o {
    memory Pos Size V *
    concatMemory Pos' To (concat Z V)
  }.

evm/sha3:
  pc PC             *
  code PC N_20      *
  !inc PC PC'       *
  gas GAS           *
  !inc GAS GAS'     *
  sh (s (s SH))     *
  stack (s SH) From *
  stack SH  To
  -o {
    concatMemory From To e *
    (unblockConcatMemory Z -o {
      code PC N_20 *
      pc PC' *
      gas GAS' *
      stack SH (sha3 Z) *
      sh (s SH)
    })
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  30

evm/address:
  pc PC *
  code PC N_30 *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH *
  address A
  -o {
    pc PC' *
    gas GAS' *
    code PC N_30 *
    sh (s SH) *
    address A *
    stack SH A
  }.

evm/balance:
  pc PC *
  code PC N_31 *
  !inc PC PC' *
  gas GAS *
  !plus N_200 GAS GAS' *
  sh (s SH) *
  stack SH A *
  balance A B
  -o {
    code PC N_31 *
    pc PC' *
    gas GAS' *
    sh (s SH) *
    stack SH B *
    balance A B
  }.

evm/caller:
  pc PC *
  code PC N_33 *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH *
  sender SENDER
  -o {
    pc PC' *
    gas GAS' *
    code PC N_33 *
    sh (s SH) *
    sender SENDER *
    stack SH SENDER
  }.

evm/callvalue:
  code PC N_34 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH *
  callvalue Value
  -o {
    pc PC' *
    gas GAS' *
    code PC N_34 *
    sh (s SH) *
    callvalue Value *
    stack SH Value
  }.

%calldatasize: bin -> bin -> bin -> type.
%calldatasize/z:
%  calldatasize PC e Size *
%  sh SH *
%  !inc SH SH'
%  -o {
%    sh SH' *
%    stack SH Size *
%    pc PC
%  }.
%calldatasize/si:
%  calldatasize PC (i X) Size *
%  !inc Size Size'
%  -o {
%    calldatasize PC X Size'
%  }.
%calldatasize/so:
%  calldatasize PC (o X) Size *
%  !inc Size Size'
%  -o {
%    calldatasize PC X Size'
%  }.


% TODO - calldataload start
%calldataload: bin -> type.
%calldataload/z:
%  calldataload Start
%  -o S
%    unblock
%  }.
%pushat/s:
%  pushat PC PC_Target *
%  !neq PC PC_Target *
%  code PC V *
%  !inc PC PC' *
%  sh SH' *
%  !inc SH SH' *
%  stack SH Number *
%  !plus (o (o (o (o (o (o (o (o Number)))))))) V V'
%  -o {
%    pushat PC' PC_Target *
%    code PC V *
%    sh SH' *
%    stack SH V'
%  }.

% TODO
% current assumption: calldatasize < 32
evm/calldataload:
  pc         PC         *
  code       PC    N_35 *
  !inc       PC    PC'  *
  sh         (s SH)     *
  stack      SH    POS  *
  calldata   POS   Size V
  -o {
    code PC' N_35 *
    stack SH V *
    sh (s SH) *
    pc PC' *
    calldata   POS   Size V
  }.

evm/calldatasize:
  pc PC *
  code PC N_36 *
  !inc PC PC' *
  calldatasize Size *
  sh SH
  -o {
    sh (s SH) *
    stack SH Size *
    code PC N_36 *
    calldatasize Size *
    pc PC'
  }.

calldatacopy: bin -> bin -> bin -> type.
unblock: type.

calldatacopy/z:
  calldatacopy Ms Cs Cs
  -o {
    unblock
  }.

% TODO
calldatacopy/s:
  calldatacopy Ms Cs Ce *
  calldata Cs Size D *
  !neq Cs Ce *
  !plus Cs Size Cs' *
  !plus Ms Size Ms'
  -o {
    memory Ms Size D *
    calldata Cs Size D *
    calldatacopy Ms' Cs' Ce
  }.

evm/calldatacopy:
  pc PC *
  code PC N_37 *
  !inc PC PC' *
  sh (s (s (s SH))) *
  stack (s (s SH))         Mem_start      *
  stack (s SH)             Calldata_start *
  stack SH                 Copy_length    *
  !plus Calldata_start Copy_length Calldata_end
%TODO fill memory with zeros in  case mem_start is bigger then the current mem_height
  -o {
    code PC N_37 *
    sh SH *
    calldatacopy Mem_start Calldata_start Calldata_end *
    (unblock -o {pc PC'})
  }.





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  40

evm/timestamp:
  pc PC *
  code PC N_42 *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH *
  timestamp TS
  -o {
    code PC N_42 *
    pc PC' *
    gas GAS' *
    sh (s SH) *
    timestamp TS *
    stack SH TS
  }.

evm/gaslimit:
  pc PC *
  code PC N_45 *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH *
  gaslimit TS
  -o {
    code PC N_45 *
    pc PC' *
    gas GAS' *
    sh (s SH) *
    gaslimit TS *
    stack SH TS
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  50


evm/sload:
  pc PC *
  code PC N_54 *
  !inc PC PC' *
  gas GAS *
  !plus N_200 GAS GAS' *
  sh (s SH) *
  stack SH KEY *
  storage KEY V
  -o {
    pc PC' *
    gas GAS' *
    code PC N_54 *
    sh (s SH) *
    stack SH V *
    storage KEY V
  }.

evm/sstore:
  pc PC *
  code PC N_55 *
  !inc PC PC' *
  gas GAS *
  !inc GAS GAS' *          %simplified
  sh (s (s SH)) *
  stack (s SH) Pos *
  stack SH  Val *
  storage Pos Z
  -o {
    code PC N_55 *
    pc PC' *
    gas GAS' *
    sh SH *
    storage Pos Val
  }.


evm/jump:
  pc PC *
  code PC N_56 *
  gas GAS *
  !plus N_08 GAS GAS' *
  sh (s SH) *
  stack SH V
  -o {
    code PC N_56 *
    pc V *
    sh SH *
    gas GAS'
  }.

evm/jumpi_neq:
  pc PC *
  code PC N_57 *
  gas GAS *
  !plus (o(i(o(i e)))) GAS GAS' * %1010 = 10 *
  sh (s (s SH)) *
  stack (s SH) NPC *
  stack SH C *
  !neq C N_00
  -o {
    code PC N_57 *
    sh SH *
    gas GAS' *
    pc NPC
  }.

evm/jumpi_eq:
  pc PC *
  code PC N_57 *
  !inc PC PC' *
  gas GAS *
  !plus N_10 GAS GAS' *
  sh (s (s SH)) *
  stack (s SH) NPC *
  stack SH N_00
  -o {
    code PC N_57 *
    sh SH *
    gas GAS' *
    pc PC'
  }.

evm/gas:
  pc PC *
  code PC N_5a *
  !inc PC PC' *
  gas GAS *
  !plus (o (i e)) GAS GAS' * %10 = 2
  sh SH
  -o {
    code PC N_5a *
    pc PC' *
    gas GAS' *
    sh (s SH) *
    stack SH GAS'
  }.

evm/jumpdest:
  pc PC *
  code PC N_5b *
  !inc PC PC' *
  gas GAS *
  !inc GAS GAS'
  -o {
    code PC N_5b *
    pc PC' *
    gas GAS'
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  60

evm/push1:
  pc PC *
  code PC N_60 *
  gas GAS *
  !plus (i (i e)) GAS GAS' *
  code PC' V *
  !inc PC PC' *
  !inc PC' PC'' *
  sh SH
  -o {
    pc PC'' *
    gas GAS' *
    code PC N_60 *
    code PC' V *
    sh (s SH) *
    stack SH V
  }.

% pushat PC x PC_Target
%pushat: bin -> bin -> type.
%pushat/z:
%  pushat PC PC
%  -o {
%    pc PC
%  }.
%pushat/s:
%  pushat PC PC_Target *
%  !neq PC PC_Target *
%  code PC V *
%  !inc PC PC' *
%  sh SH' *
%  !inc SH SH' *
%  stack SH Number *
%  !plus (o (o (o (o (o (o (o (o Number)))))))) V V'
%  -o {
%    pushat PC' PC_Target *
%    code PC V *
%    sh SH' *
%    stack SH V'
%  }.

evm/push20:
  pc PC *
  code PC N_73 *
  !inc PC PC' *
  code PC' V *
  !plus N_14 PC' PC_Target *
  gas GAS *
  !plus (i (i e)) GAS GAS' *
  sh SH
  -o {
    code PC N_73 *
    pc PC_Target *
    sh (s SH) *
    stack SH V *
    gas GAS'
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  70

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  80

evm/dup1:
  pc PC *
  code PC N_80 *
  !inc PC PC' *
  gas GAS *
  !plus (i(i e)) GAS GAS' * %11 = 3
  sh (s SH) *
  stack SH V
  -o {
    code PC N_80 *
    pc PC' *
    gas GAS' *
    sh (s (s SH)) *
    stack SH V *
    stack (s SH) V
  }.

evm/dup2:
  pc PC *
  code PC N_81 *
  !inc PC PC' *
  gas GAS *
  !plus (i(i e)) GAS GAS' * %11 = 3
  sh (s (s SH)) *
  stack SH V
  -o {
    code PC N_81 *
    pc PC' *
    gas GAS' *
    sh (s (s (s SH))) *
    stack SH V *
    stack (s (s SH)) V
  }.

evm/dup3:
  pc PC *
  code PC N_82 *
  !inc PC PC' *
  gas GAS *
  !plus (i(i e)) GAS GAS' * %11 = 3
  sh (s (s (s SH))) *
  stack SH V
  -o {
    code PC N_82 *
    pc PC' *
    gas GAS' *
    sh (s (s (s (s SH)))) *
    stack SH V *
    stack (s (s (s SH))) V
  }.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  90

evm/swap1:
  pc PC *
  code PC N_90 *
  !inc PC PC' *
  gas GAS *
  !inc GAS GAS' *                  % simplified
  sh (s (s SH)) *
  stack (s SH) X *
  stack SH  Y
  -o {
    code PC N_90 *
    pc PC' *
    gas GAS' *
    sh (s (s SH)) *
    stack (s SH) Y *
    stack SH  X
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  a0

% TODO - memory
evm/log4:
  pc PC *
  code PC N_a4 *
  !inc PC PC' *
  gas GAS *
  !inc GAS GAS' *
  sh (s (s (s (s (s (s SH)))))) *
  stack (s (s (s (s (s SH))))) V0      *
  stack (s (s (s (s SH))))  V1      *
  stack (s (s (s SH)))   V2      *
  stack (s (s SH))    V3      *
  stack (s SH)     V4      *
  stack SH      V5
  -o {
    code PC N_a4 *
    pc PC' *
    gas GAS' *
    sh (s SH) *
    log4 V2 V3 V4 V5
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  b0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  c0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  d0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  e0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  f0

% SIMPLIFIED CALL - TODO
evm/call:
  pc PC *
  code PC N_f1 *
  !inc PC PC' *
  gas GAS *                        % simplified
  !inc GAS GAS' *                  % simplified
  sh    (s (s (s (s (s (s (s SH )))))))           *
  stack    (s (s (s (s (s (s SH ))))))   GAS_T       *
  stack       (s (s (s (s (s SH )))))    TO_T        *
  stack          (s (s (s (s SH ))))     VALUE_T     *
  stack             (s (s (s SH )))      InOffset_T  *
  stack                (s (s SH ))       InSize_T    *
  stack                   (s SH)         OutOffset_T *
  stack                      SH          OutSize_T
  % !plus BALANCE VALUE VALUE' *
  % !plus New_Value VALUE Contract_BALANCE *
  % balance ADDRESS BALANCE *
  % address Contract_Address *
  % balance Contract_Address Contract_BALANCE
  -o {
    code PC N_f1 *
    pc PC' *
    gas GAS' *
    sh (s SH) *
    stack SH N_01 *
    call GAS_T TO_T VALUE_T InOffset_T InSize_T OutOffset_T OutSize_T
    % address Contract_Address *
    % balance ADDRESS VALUE' *
    % balance Contract_Address New_Value
  }.

evm/invalid:
  pc PC *
  code PC N_fe
  -o {
    code PC N_fe *
    invalid
  }.

evm/revert:
  pc PC *
  code PC N_fd
  -o {
    code PC N_fd *
    revert
  }.
