% EVM
%
% 00   STOP
% 01   ADD           *
% 02   MUL           *
% 03   SUB           *

% 10   LT            TODO
% 11   GT            TODO
% 14   EQ
% 15   ISZERO        TODO
% 16   AND           TODO
% 17   OR            TODO
% 19   NOT           TODO

% 20   SHA3          TODO

% 30   ADDRESS
% 31   BALANCE
% 33   CALLER
% 34   CALLVALUE     TODO
% 35   CALLDATALOAD  TODO
% 36   CALLDATASIZE  TODO
% 37   CALLDATACOPY  TODO

% 42   TIMESTAMP     TODO
% 45   GASLIMIT      TODO

% 54   SLOAD
% 55   SSTORE        TODO
% 56   JUMP          TODO
% 57   JUMPI
% 5a   GAS
% 5b   JUMPDEST

% 60   PUSH1
% 73   PUSH20        TODO

% 80   DUP1
% 81   DUP2          TODO
% 82   DUP3          TODO

% 90   SWAP1         TODO

% a4   LOG4          TODO

% f1   CALL
% fe   INVALID       TODO
%

stop: type.
pc: bin -> type.
gas: bin -> type.
sh: bin -> type.
code: bin -> bin -> type.
stack: bin -> bin -> type.
storage: bin -> bin -> type.
sender: bin -> type.
address: bin -> type.
balance: bin -> bin -> type.
debug: bin -> type.





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  00

evm/stop:
  code PC N_00 *
  pc PC *
  !inc PC PC'
  -o {
    code PC N_00 *
    stop
  }.

evm/add:
  code PC N_01 *
  pc PC *
  !inc PC PC' *
  sh SH'' *
  !inc SH' SH'' *
  !inc SH SH' *
  stack SH' A *
  stack SH  B *
  !plus A B C
  -o {
    code PC N_01 *
    pc PC' *
    sh SH' *
    stack SH C
  }.

evm/mul:
  code PC N_02 *
  pc PC *
  !inc PC PC' *
  sh SH'' *
  !inc SH' SH'' *
  !inc SH SH' *
  stack SH' A *
  stack SH  B *
  !mul A B C
  -o {
    code PC N_01 *
    pc PC' *
    sh SH' *
    stack SH C
  }.

evm/sub:
  code PC N_02 *
  pc PC *
  !inc PC PC' *
  sh SH'' *
  !inc SH' SH'' *
  !inc SH SH' *
  stack SH' A *
  stack SH  B *
  !plus C B A
  -o {
    code PC N_01 *
    pc PC' *
    sh SH' *
    stack SH C
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  10

evm/eq_eqeq:
  code PC N_14 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH'' *
  !inc SH' SH'' *
  !inc SH SH' *
  stack SH' X *
  stack SH X
  -o {
    pc PC' *
    gas GAS' *
    code PC N_14 *
    sh SH' *
    stack SH (i e)
  }.

evm/eq_neq:
  code PC N_14 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH'' *
  !inc SH' SH'' *
  !inc SH SH' *
  stack SH' X *
  stack SH Y *
  !neq X Y
  -o {
    pc PC' *
    gas GAS' *
    code PC N_14 *
    sh SH' *
    stack SH e
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  20

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  30

evm/address:
  code PC N_30 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH *
  !inc SH SH' *
  address A
  -o {
    pc PC' *
    gas GAS' *
    code PC N_30 *
    sh SH' *
    address A *
    stack SH A
  }.

evm/balance:
  code PC N_31 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus N_200 GAS GAS' *
  sh SH' *
  !inc SH SH' *
  stack SH A *
  balance A B
  -o {
    code PC N_31 *
    pc PC' *
    gas GAS' *
    sh SH' *
    stack SH B *
    balance A B
  }.

evm/caller:
  code PC N_33 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus (o(i e)) GAS GAS' * %10 = 2 *
  sh SH *
  !inc SH SH' *
  sender SENDER
  -o {
    pc PC' *
    gas GAS' *
    code PC N_33 *
    sh SH' *
    sender SENDER *
    stack SH SENDER
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  40

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  50


evm/sload:
  code PC N_54 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus N_200 GAS GAS' *
  sh SH' *
  !inc SH SH' *
  stack SH KEY *
  storage KEY V
  -o {
    pc PC' *
    gas GAS' *
    code PC N_54 *
    sh SH' *
    stack SH V *
    storage KEY V
  }.

evm/jumpi_neq:
  code PC N_57 *
  pc PC *
  gas GAS *
  !plus (o(i(o(i e)))) GAS GAS' * %1010 = 10 *
  sh SH'' *
  !inc SH' SH'' *
  !inc SH SH' *
  stack SH' NPC *
  stack SH C *
  !neq C e
  -o {
    code PC N_57 *
    sh SH *
    gas GAS' *
    pc NPC
  }.

evm/jumpi_eq:
  code PC N_57 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus N_10 GAS GAS' *
  sh SH'' *
  !inc SH' SH'' *
  !inc SH SH' *
  stack SH' NPC *
  stack SH e
  -o {
    code PC N_57 *
    sh SH *
    gas GAS' *
    pc PC'
  }.

evm/gas:
  code PC N_5a *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus (o (i e)) GAS GAS' * %10 = 2
  sh SH *
  !inc SH SH'
  -o {
    code PC N_5a *
    pc PC' *
    gas GAS' *
    sh SH' *
    stack SH GAS'
  }.

evm/jumpdest:
  code PC N_5b *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !inc GAS GAS'
  -o {
    code PC N_5b *
    pc PC' *
    gas GAS'
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  60

evm/push1:
  code PC N_60 *
  pc PC *
  gas GAS *
  !plus (i (i e)) GAS GAS' *
  code PC' V *
  !inc PC PC' *
  !inc PC' PC'' *
  sh SH *
  !inc SH SH'
    -o {
      pc PC'' *
      gas GAS' *
      code PC N_60 *
      code PC' V *
      sh SH' *
      stack SH V
      }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  70

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  80

evm/dup1:
  code PC N_80 *
  pc PC *
  !inc PC PC' *
  gas GAS *
  !plus (i(i e)) GAS GAS' * %11 = 3
  sh SH' *
  !inc SH SH' *
  !inc SH' SH'' *
  stack SH V
  -o {
    code PC N_80 *
    pc PC' *
    gas GAS' *
    sh SH'' *
    stack SH V *
    stack SH' V
  }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  90

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  a0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  b0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  c0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  d0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  e0

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  f0

% SIMPLIFIED CALL - TODO
evm/call:
  code PC N_f1 *
  pc PC *
  !inc PC PC' *
  gas GAS *                        % simplified
  !inc GAS GAS' *                  % simplified
  sh ST *
  !inc _GAS ST *
  !inc _ADDRESS _GAS *
  !inc _VALUE _ADDRESS *
  !inc MEM0 _VALUE *
  !inc MEM1 MEM0 *
  !inc SH' MEM1 *
  !inc SH SH' *
  stack _ADDRESS ADDRESS *
  stack _VALUE VALUE *
  stack _GAS TRASH *
  stack MEM0 TRASH1 *
  stack MEM1 TRASH2 *
  stack SH'  TRASH3 *
  stack SH   TRASH4 *
  !plus BALANCE VALUE VALUE' *
  !plus New_Value VALUE Contract_BALANCE *
  balance ADDRESS BALANCE *
  address Contract_Address *
  balance Contract_Address Contract_BALANCE
  -o {
    code PC N_f1 *
    pc PC' *
    gas GAS' *
    sh SH' *
    address Contract_Address *
    stack SH N_00 *
    balance ADDRESS VALUE' *
    balance Contract_Address New_Value
  }.
