% First we define nat - the type of natural numbers
% A natural number can be zero (z) or a successor/increment (s)
% of a natural number.
nat: type.
z: nat.
s: nat -> nat.

% abbreviation four
four : nat = s (s (s (s z))).

% add2 is a function incrementing a natural number twice.
add2 : nat -> nat = \!x. s (s !x).

% we create a box in which we can store natural numbers
box: nat -> type.

% TODO: don't know exactly what happens here
test_box: type =
{ box (s four) }.

#trace * test_box.

% plus computation
plus_c: nat -> nat -> nat -> type.
plus_c/z: plus_c z N N.
plus_c/s: plus_c (s X) N (s Z)
  <- plus_c X N Z.

% plus predicate
plus: nat -> nat -> nat.

eval: nat -> nat -> type.
eval_trigger: nat -> nat -> type.

eval_trigger/trigger:
     eval_trigger (plus X Y) Z
  <- eval         (plus X Y) Z.

eval/z:    eval z           z.
eval/s:    eval (s X)      (s X).
eval/plus: eval (plus X Y)  Z
  <- eval X X'
  <- eval Y Y'
  <- plus_c X' Y' Z
  .

#trace * {
  box (plus (s z) z)
}.

% TODO: every predicate which holds numbers needs an evaluator
plus_optimizer:
 box X *
 eval_trigger X Z
 -o {
   box Z
 }.

#trace * {
  box (plus (s z) z)
}.


exec: nat -> type.

debug2: nat -> type.

Atype: type.
Btype: type.

bwd_test: Atype
  <- Btype.

step0: box z * Atype
  -o {
    box (s z)
  }.
step1: box (s z) * Atype
  -o {
    box (s (s z))
  }.

#trace * {
  box z * !Btype
}.

ddd: box X
  -o {
    debug2 (add2 !X)
  }.


% TODO - review this
% this seems to have affine types and a query without cleanup
% I wonder wether i can utilize this for building queries for
% the evm without the need for a cleanup
% https://github.com/chrisamaphone/interactive-lp/blob/master/examples/if-zarf-pants.clf

% Ressearch what pi types mean here:
% https://github.com/chrisamaphone/interactive-lp/blob/master/examples/if.clf

% fplus seems to combine pattern matching and backwards chaining
% maybe this can be utilized to get a binary plus working
% https://github.com/chrisamaphone/interactive-lp/blob/master/examples/platformer.clf

% complex type + complex implementation
% https://github.com/clf/celf/blob/master/tests/atp.clf
